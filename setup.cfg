# A declarative setuptools configuration.
# Cf:
# https://packaging.python.org/guides/distributing-packages-using-setuptools/
# https://github.com/pypa/sampleproject

[metadata]
# This is the name of your project. The first time you publish this
# package, this name will be registered for you. It will determine how
# users can install this project, e.g.:
#   $ pip install sampleproject
# And where it will live on PyPI: https://pypi.org/project/sampleproject/
# There are some restrictions on what makes a valid project name
# specification here:
# https://packaging.python.org/specifications/core-metadata/#name
name = pyprojex
author = Author Name
author_email = author@email.com
maintainer = Maintainer Name
maintainer_email = maintainer@email.com

# This is a one-line description or tagline of what your project does. This
# corresponds to the "Summary" metadata field:
# https://packaging.python.org/specifications/core-metadata/#summary
description = Example Python project exploring basic packaging lifecycle.

# An optional longer description of your project that represents
# the body of text which users will see when they visit PyPI. Typically
# simply the concatenation of relevant files.
long_description = file: README.md, CHANGELOG, LICENSE

# Denotes that our long_description is in Markdown; valid values are
# text/plain, text/x-rst, and text/markdown.
# reStructured text (.rst) is assumed by default, but this format
long_description_content_type = text/markdown

keywords = pep517, pep518, example
license = MIT License
license_file = LICENSE

# Valid link to your project's main homepage.
# This field corresponds to the "Home-Page" metadata field:
# https://packaging.python.org/specifications/core-metadata/#home-page-optional
url = https://github.com/shawnohare/pyprojex

# download_url = TODO
# project_urls = TODO
# platforms = list-comma
# provides = list-comma
# requires = list-comma
# obsoletes = list-comma

# Versions should comply with PEP 440:
# https://www.python.org/dev/peps/pep-0440/
# version can be specified as a str, in a file, or as an attribute in a module.
# For a discussion on single-sourcing the version across setup.py and the
# project code, see
# https://packaging.python.org/en/latest/single_source_version.html
version = 0.0.3
# version = attr: pkg1.VERSION
#version = file: src/VERSION


# Classifiers help users find your project by categorizing it.
# For a list of valid classifiers, see https://pypi.org/classifiers/
classifiers =
   Programming Language :: Python :: 3
   Programming Language :: Python :: 3.7

[options]
zip_safe = False
include_package_data = True

# Specify which Python versions you support. In contrast to the
# 'Programming Language' classifiers above, 'pip install' will check this
# and refuse to install the project if the version does not match. If you
# do not support Python 2, you can simplify this to '>=3.5' or similar, see
# https://packaging.python.org/guides/distributing-packages-using-setuptools/#python-requires
python_requires = >=3.7

# Define the location of packages included with the distribution.
# The setup below will include all packages encountered in src/
package_dir = =src
packages = find:

# Generic executables that can be called when the virtual env is active.
# Less portable than entry_points.
scripts =
    bin/hello.py
    bin/hi.sh
    # bin/second.py

# This field lists other packages that your project depends on to run.
# Any package you put here will be installed by pip when your project is
# installed, so they must be valid existing projects.
# For an analysis of "install_requires" vs pip's requirements files see:
# https://packaging.python.org/en/latest/requirements.html
install_requires =
    pip>=19
    setuptools>=41

# Options to the find_packages function. Chiefly, one can exclude certain
# packages here, e.g., tests. Often though tests are written outside of src.
[options.packages.find]
where = src
exclude =
     toexclude

# The preferred location for package data (non .py files in some package). The
# files can be loaded via the pkg_resources module provided by setuptools.  If
# using Python 2.6 or earlier build tools, then these have to be included in
# MANIFEST.in as well.
[options.package_data]
* = *.txt, *.rst, *.md, *.json, *.j2
pkg1 =
  data/*.dat
  *.msg

# List additional groups of dependencies here (e.g. development
# dependencies). Users will be able to install these using the "extras"
# syntax, for example:
#
#   $ pip install sampleproject[$extra]
#
# or for local projects
#   $ pip install '.[$extra]'
#
# where $extra is some key in the extras_require mapping.
# Similar to `install_requires` above, these must be valid existing
# projects.
# This section can be used to specify, e.g., development requirements.
[options.extras_require]
dist =
    twine
dev =
    tox

# Data files are not package specific.
# Files with a relative path for a key are placed relative to sys.prefix
# Files with an absolute path are not handled consistently. They can be
# placed absolutely wrt to the filesystem by sdists but relative to
# site-packages via wheel.
# cf: https://github.com/pypa/wheel/issues/92
# [options.data_files]
# /etc/pyprojex =
#     data/data1.dat
# data =
#     data/data1.dat
#     data/data2.dat

# To expose package logic to the CLI, use entry points instead of
# creating external wrapper scripts and exposing them via the `scripts` option.
# Entry points provide cross-platform support and allow
# `pip` to create the appropriate form of executable for the target
# platform.
# For example, the following would provide a command called `pkg1hello` which
# executes the function `hello` from this package `main.py` module when invoked:
[options.entry_points]
console_scripts =
    pkg1hello=pkg1.main:hello
